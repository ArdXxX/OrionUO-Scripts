// Pet Intensity Calculator
// Calculates the intensity of a pet and shows the result. Colors: <50% red, 50–80% yellow, >80% green.
// Version 1.1 (Fixed pretame Cu Sidhe)
// Author: Android#7813   


var pet_configs = {
  'nightmare':            {min:3951, max:4254, dmg:75,  magical:1500, ability:100},
  'drake':                {min:2820, max:3144, dmg:60,  magical:0,    ability:100},
  'dragon':               {min:6599, max:6936, dmg:75,  magical:1500, ability:100},
  'giant beetle':         {min:1680, max:1830, dmg:70,  magical:0,    ability:0},
  'fire beetle':          {min:1890, max:1905, dmg:70,  magical:0,    ability:0},
  'fire steed':           {min:2870, max:3170, dmg:80,  magical:0,    ability:100},
  'clydesdale':           {min:2102, max:2818, dmg:70,  magical:0,    ability:0},
  'cu sidhe':             {min:4624, max:5261, dmg:95,  magical:0,    ability:200, reduce:true},   // <- only Cu Sidhe has stat reduction
  'greater dragon':       {min:6139, max:7149, dmg:110, magical:1500, ability:200},
  'high plains boura':    {min:3701, max:4255, dmg:80,  magical:0,    ability:100},
  'gaman':                {min:1495, max:2001, dmg:40,  magical:0,    ability:0},
  'hell hound':           {min:2581, max:3207, dmg:60,  magical:1500, ability:100},
  'hiryu':                {min:4340, max:5272, dmg:100, magical:0,    ability:200},
  'ki-rin':               {min:3774, max:4117, dmg:75,  magical:1500, ability:0},
  'unicorn':              {min:3834, max:4222, dmg:75,  magical:1500, ability:0},
  'lesser hiryu':         {min:2070, max:2705, dmg:80,  magical:0,    ability:200},
  'rune beetle':          {min:5111, max:5760, dmg:75,  magical:1600, ability:200},
  'shadowmane':           {min:4248, max:4248, dmg:75,  magical:1500, ability:0},
  'white wyrm':           {min:5097, max:5760, dmg:85,  magical:1500, ability:0}
};

 
function PetIC() {
  var name      = Shared.GetVar('PetIC_name');
  var oldSlots  = Shared.GetVar('PetIC_oldSlots');
  var newSlots  = Shared.GetVar('PetIC_newSlots');
  var pctRating = Shared.GetVar('PetIC_pctRating');
  var pctValue  = Shared.GetVar('PetIC_pctValue');
  var undefPet  = Shared.GetVar('PetIC_undefined');

  var g = Orion.CreateCustomGump(30001);
  g.Clear();
  g.SetCallback('PetIC_');

  g.AddResizepic(0,0,'0x9C40',200,155);
  g.AddText(15,10,'0x0481','Pet Intensity Calculator');

  g.AddButtonTileArt(1,16,35, '0x2076','0x2076','0x2076','', '0x2076','',0,0);
  g.AddText(75,42,'0x0481','Evaluate Pet');

  g.AddButton(2,175,10,'22153','22154','22155','');
  g.AddTooltip('Help → GitHub: ArdXxX & Discord: Android#7813');

  if (undefPet) {
    g.AddText(15,75,'0x0025','Undefined pet: ' + undefPet);
    g.AddText(15,95,'0x0025','Report to Android#7813');
  } else if (name) {
    g.AddText(15,75,'0x0481','Name: ' + name);
    g.AddText(15,95,'0x0481','Pet Slots: ' + oldSlots + ' → ' + newSlots);
    var hue = (pctValue < 50) ? '0x0025' : (pctValue < 80) ? '0x0030' : '0x0048';
    g.AddText(15,115,hue,'Intensity Rating: ' + pctRating);
  }
  g.Update();
}

function PetIC_(_) {
  var code = CustomGumpResponse.ReturnCode();
  
  Orion.CloseGump('custom','any',0x1DB);

  if (code === 1) {
    Shared.ClearVars();
    PetIC();

    var res = EvaluatePet();
    if (res.undefined) {
      Shared.AddVar('PetIC_undefined', res.undefined);
    } else {
      Shared.AddVar('PetIC_name',      res.name);
      Shared.AddVar('PetIC_oldSlots',  res.oldSlots);
      Shared.AddVar('PetIC_newSlots',  res.newSlots);
      Shared.AddVar('PetIC_pctRating', res.pctRating);
      Shared.AddVar('PetIC_pctValue',  res.pctValue);
    }
    PetIC();
  }
  else if (code === 2) {
    Orion.Print('GitHub: github.com/ArdXxX/OrionUO-Scripts');
    Orion.Print('Discord: Android#7813');
    PetIC();
  }
  else if (code === 0) {
    Shared.ClearVars();
  }
}

function EvaluatePet(_) {
  Orion.CloseGump('generic','any',0x1DB);
  if (!Orion.WaitForAddObject('targetCreature', 10000)) {
    Orion.Print('PetIC: No target selected.');
    return {};
  }
  var pet = Orion.FindObject('targetCreature');
  if (!pet) {
    Orion.Print('PetIC: Invalid target.');
    return {};
  }

  Orion.UseSkill('Animal Lore');
  Orion.WaitForTarget(1000);
  Orion.TargetObject(pet.Serial());

  if (!Orion.WaitForGump(3000, true)) {
    Orion.Print('PetIC: Animal Lore gump not found.');
    return {};
  }

  var g = Orion.GetLastGump();
  var raw = g.TextList();
  var lines = [];
  for (var i = 0; i < raw.length; i++) {
    var t = raw[i].replace(/<[^>]*>/g, '').trim();
    if (t) lines.push(t);
  }

  if (lines.length < 25) {
    Orion.Print('PetIC: Lore gump layout unexpected (lines=' + lines.length + ').');
  }

  var nmLower = pet.Name().toLowerCase();
  var key = null;
  for (var k in pet_configs) {
    if (nmLower.indexOf(k) !== -1) { key = k; break; }
  }
  if (!key) {
    Orion.Print('PetIC: undefined pet: ' + pet.Name());
    Orion.Wait(800);
    Orion.CloseGump('generic','any',0x1DB);
    return { undefined: pet.Name() };
  }

  var cfg = pet_configs[key];

  var stats = [1,2,3,4,5,6];
  for (var si = 0; si < stats.length; si++) {
    stats[si] = _num(_safeLine(lines, stats[si]));
  }
  var resists = [11,12,13,14,15];
  for (var ri = 0; ri < resists.length; ri++) {
    resists[ri] = _pct(_safeLine(lines, resists[ri]));
  }

  if (cfg.reduce) {
    stats[0] = Math.floor(stats[0] / 2);
    stats[1] = Math.floor(stats[1] / 2);
    stats[2] = Math.floor(stats[2] / 2);
    stats[3] = Math.floor(stats[3] / 2);
  }

  var wStats    = [3, 0.5, 0.5, 3, 0.1, 0.5];
  var wResists  = [3, 3, 3, 3, 3];

  var total = 0;
  for (var i1 = 0; i1 < stats.length; i1++) {
    total += Math.floor(stats[i1] * wStats[i1]);
  }
  for (var j1 = 0; j1 < resists.length; j1++) {
    total += Math.floor(resists[j1] * wResists[j1]);
  }

  var bdLine = _safeLine(lines, 21);
  var mBD = bdLine.match(/(\d+)-(\d+)/);
  var baseDamage = 0;
  if (mBD) {
    baseDamage = (parseInt(mBD[1], 10) + parseInt(mBD[2], 10)) / 2;
  }

  total += (cfg.dmg || 0) + (cfg.magical || 0) + (cfg.ability || 0);

  var den = (cfg.max - cfg.min);
  var pctValue = den > 0 ? ((total - cfg.min) / den) * 100 : 0;
  if (pctValue < 0) pctValue = 0;
  if (pctValue > 100) pctValue = 100;
  var pctRating = pctValue.toFixed(2) + '%';

  var slotLine = _safeLine(lines, 43);
  var sm = slotLine.match(/(\d+)\s*=>\s*(\d+)/);
  var oldS = sm ? sm[1] : '?';
  var newS = sm ? sm[2] : '?';

  Orion.Wait(500);
  Orion.CloseGump('generic','any',0x1DB);

  return {
    name:      pet.Name(),
    oldSlots:  oldS,
    newSlots:  newS,
    pctRating: pctRating,
    pctValue:  pctValue
  };
}

function _num(s) {
  var m = s ? s.match(/(\d+)/) : null;
  return m ? parseInt(m[1], 10) : 0;
}

function _pct(s) {
  var m = s ? s.match(/(\d+)%/) : null;
  return m ? parseInt(m[1], 10) : 0;
}

function _safeLine(lines, idx) { return (idx >= 0 && idx < lines.length) ? lines[idx] : ''; }
